{
  "projectContext": {
    "description": "Collaborative rich-text note-taking platform with version history and real-time previews. Key characteristics:",
    "additionalInformation": "User has limited backend development experience. Need to:",
    "developmentApproach": {
      "explanation": "Move slowly with backend development, explaining each step thoroughly. Consider:",
      "points": [
        "Explain database concepts and SQL operations",
        "Break down complex backend patterns into simpler terms",
        "Show how data flows from API routes to database",
        "Explain why certain patterns/practices are used",
        "Document each step in comments for future reference"
      ]
    },
    "domainModel": {
      "coreEntities": {
        "User": {
          "fields": [
            "id",
            "email (hashed)",
            "password (bcrypt)",
            "created_at"
          ],
          "relations": [
            "Note:hasMany"
          ]
        },
        "Note": {
          "fields": [
            "id",
            "title",
            "content_json",
            "html_snapshot",
            "version",
            "collaborators (User IDs)"
          ],
          "methods": [
            "sanitizeContent()",
            "compressJson()",
            "renderHtml()"
          ]
        }
      }
    },
    "architecture": {
      "frontend": {
        "technology": "NextJS 15 with app folder",
        "pattern": "Feature-Sliced Design",
        "bestPractices": {
          "serverComponents": {
            "description": "Keep components server-side by default, especially layouts",
            "rules": [
              "Root layout must be a server component",
              "Only add 'use client' when component needs client-side features",
              "Keep providers and client-side logic in separate client components",
              "Split components to maximize server-side rendering"
            ],
            "benefits": [
              "Better performance",
              "Smaller bundle size",
              "Faster initial page load",
              "Better SEO"
            ]
          },
          "providers": {
            "description": "Organize providers to maximize server-side rendering",
            "rules": [
              "Keep client-side providers (React Query, Toaster, etc.) in a separate ClientProviders component",
              "Keep layout components as server components",
              "Wrap only the necessary parts of the app with client-side providers",
              "Use composition to keep provider logic separate from layout logic"
            ],
            "example": {
              "bad": "Making RootLayoutContent a client component affects all children",
              "good": "Separate ClientProviders component keeps layout server-side"
            }
          }
        },
        "editor": {
          "tiptap": {
            "extensions": [
              "StarterKit",
              "Image",
              "TaskList",
              "TaskItem",
              "Link"
            ],
            "configuration": {
              "typography": {
                "required": "@tailwindcss/typography plugin",
                "classes": "prose prose-slate dark:prose-invert prose-headings:font-cal",
                "customization": "Use theme.extend.typography in tailwind.config.ts"
              },
              "taskLists": {
                "classes": {
                  "list": "not-prose pl-2",
                  "item": "flex items-start my-4"
                },
                "configuration": {
                  "nested": true
                }
              },
              "headings": {
                "levels": [1, 2],
                "classes": "font-cal"
              }
            },
            "security": "Content sanitization through Tiptap's built-in sanitization"
          }
        },
        "dataFlow": "Zustand ← TanStack Query → Next.js API Routes → Go backend",
        "components": {
          "ui": "shadcn/ui",
          "form": "use new react action as possible",
          "http request": "tanstack query",
          "notifications": {
            "library": "sonner",
            "description": "Use sonner for toast notifications instead of custom implementation",
            "reasons": [
              "Lightweight and performant",
              "Better TypeScript support",
              "Modern design that matches our UI",
              "Easy to customize with our design system",
              "Built-in accessibility features"
            ],
            "usage": {
              "success": "toast.success('Message')",
              "error": "toast.error('Message')",
              "promise": "toast.promise(promise, { loading: 'Loading...', success: 'Success!', error: 'Error!' })"
            }
          }
        },
        "setup": {
          "tailwind": {
            "configFile": "tailwind.config.ts",
            "requiredPlugins": [
              "@tailwindcss/typography",
              "tailwindcss-animate"
            ],
            "commonIssues": [
              "Multiple config files (use .ts version)",
              "Missing typography plugin",
              "Incorrect prose classes",
              "Dark mode configuration"
            ]
          }
        },
        "designSystem": {
          "colors": {
            "brand": {
              "primary": {
                "description": "Vibrant Blue - Main brand color",
                "scale": "50-900 for light to dark variants",
                "usage": [
                  "Primary buttons",
                  "Important links",
                  "Active states",
                  "Brand elements"
                ]
              },
              "accent": {
                "description": "Electric Purple - Secondary brand color",
                "scale": "50-900 for light to dark variants",
                "usage": [
                  "Highlights",
                  "Secondary actions",
                  "Success states"
                ]
              },
              "secondary": {
                "description": "Vibrant Teal - Supporting brand color",
                "scale": "50-900 for light to dark variants",
                "usage": [
                  "Supporting UI elements",
                  "Backgrounds",
                  "Borders"
                ]
              }
            },
            "semantic": {
              "success": {
                "description": "Green - Positive actions/states",
                "variants": ["light", "DEFAULT", "dark"]
              },
              "error": {
                "description": "Red - Negative actions/states",
                "variants": ["light", "DEFAULT", "dark"]
              },
              "warning": {
                "description": "Orange - Cautionary actions/states",
                "variants": ["light", "DEFAULT", "dark"]
              }
            },
            "neutral": {
              "description": "Warm Gray - Text and UI elements",
              "scale": "50-900 for light to dark variants"
            },
            "system": {
              "background": "Base page background",
              "foreground": "Primary text color",
              "card": "Card component colors",
              "popover": "Dropdown/popover colors",
              "muted": "Subtle UI elements",
              "destructive": "Dangerous actions",
              "border": "Border colors",
              "input": "Form input colors",
              "ring": "Focus ring colors"
            },
            "chart": {
              "description": "Data visualization colors",
              "scale": "1-5 for different chart elements"
            }
          },
          "typography": {
            "fonts": {
              "cal": "Cal Sans for headings (var(--font-cal))",
              "inter": "Inter for body text (var(--font-inter))",
              "mono": "Monospace for code"
            },
            "sizes": {
              "scale": {
                "xs": "0.75rem (12px)",
                "sm": "0.875rem (14px)",
                "base": "1rem (16px)",
                "lg": "1.125rem (18px)",
                "xl": "1.25rem (20px)",
                "2xl": "1.5rem (24px)",
                "3xl": "1.875rem (30px)",
                "4xl": "2.25rem (36px)",
                "5xl": "3rem (48px)",
                "6xl": "3.75rem (60px)",
                "7xl": "4.5rem (72px)"
              }
            },
            "weights": {
              "normal": "400",
              "medium": "500",
              "semibold": "600",
              "bold": "700",
              "extrabold": "800"
            },
            "lineHeights": {
              "none": "1",
              "tight": "1.25",
              "snug": "1.375",
              "normal": "1.5",
              "relaxed": "1.625",
              "loose": "2"
            },
            "letterSpacing": {
              "tighter": "-0.05em",
              "tight": "-0.025em",
              "normal": "0em",
              "wide": "0.025em",
              "wider": "0.05em",
              "widest": "0.1em"
            }
          },
          "spacing": {
            "scale": "0-24 (0rem to 6rem)",
            "increments": "0.25rem (4px) steps"
          },
          "breakpoints": {
            "sm": "640px",
            "md": "768px",
            "lg": "1024px",
            "xl": "1280px",
            "2xl": "1536px"
          },
          "radii": {
            "none": "0",
            "sm": "0.125rem",
            "DEFAULT": "0.25rem",
            "md": "0.375rem",
            "lg": "0.5rem",
            "xl": "0.75rem",
            "2xl": "1rem",
            "full": "9999px"
          },
          "shadows": {
            "sm": "Small shadow for subtle elevation",
            "DEFAULT": "Default shadow for cards",
            "md": "Medium shadow for dropdowns",
            "lg": "Large shadow for modals",
            "xl": "Extra large shadow for popovers"
          },
          "transitions": {
            "DEFAULT": "150ms cubic-bezier(0.4, 0, 0.2, 1)",
            "fast": "100ms cubic-bezier(0.4, 0, 0.2, 1)",
            "slow": "300ms cubic-bezier(0.4, 0, 0.2, 1)"
          },
          "animation": {
            "DEFAULT": "0.2s ease-out",
            "fast": "0.1s ease-out",
            "slow": "0.3s ease-out"
          }
        }
      },
      "backend": {
        "pattern": "Clean Architecture (Use Cases + Repositories)",
        "routing": {
          "convention": "Standard http.ServeMux",
          "description": "Use Go's standard library http.ServeMux for routing to maintain consistency",
          "reasons": [
            "Simpler maintenance with standard library",
            "Sufficient for our REST API needs",
            "No external dependencies for core routing",
            "Better for onboarding new developers"
          ],
          "implementation": {
            "baseHandler": {
              "structure": "Each handler package should have its own Handler struct",
              "example": "type Handler struct { useCase *note.UseCase }",
              "registration": "Register method to set up routes with http.ServeMux"
            },
            "routing": {
              "pattern": "All routes should be prefixed with /api/v1/",
              "methods": "Use switch on r.Method for handling different HTTP methods",
              "parameters": "Use strings.TrimPrefix for path parameter extraction"
            },
            "middleware": {
              "auth": "Use AuthMiddleware for protected routes",
              "cors": "Apply CORSMiddleware at the application level"
            }
          },
          "commonPitfalls": {
            "routerMixing": {
              "problem": "Mixing different router implementations (e.g., Chi with standard mux)",
              "solution": "Stick to http.ServeMux throughout the application"
            },
            "pathHandling": {
              "problem": "Inconsistent path handling with trailing slashes",
              "solution": "Always use trailing slash in route definitions"
            },
            "middlewareOrder": {
              "problem": "Incorrect middleware ordering",
              "solution": "Apply authentication before route handling"
            }
          }
        },
        "deltaProcessing": {
          "pipeline": [
            "Validate incoming delta",
            "Merge with current version",
            "Sanitize HTML output",
            "Generate preview text",
            "Update search index"
          ]
        }
      }
    },
    "keyDecisions": {
      "sanitization": "Always sanitize the content before storing it in the database.",
      "editor": "Chose Tiptap over alternatives because:",
      "reasons": [
        "Modern, headless and extensible architecture",
        "First-class TypeScript support",
        "Built on ProseMirror for reliability",
        "Active community and extensive documentation",
        "Built-in collaboration features"
      ],
      "tradeoffs": [
        "More setup required vs simpler editors",
        "Larger initial learning curve",
        "JSON-based content storage"
      ]
    },
    "collaboration": {
      "realtime": {
        "shortTerm": "Polling every 30s with version checks",
        "longTerm": "WebSocket-based OT using sharedb-quill-backend"
      },
      "conflictResolution": "Last-write-wins with version mismatch errors"
    }
  }
}

